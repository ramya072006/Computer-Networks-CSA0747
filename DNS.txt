// Date and time using TCP
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    time_t current_time;

    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    // Bind socket to port 8080
    bind(server_fd, (struct sockaddr*)&address, sizeof(address));

    // Listen for connections
    listen(server_fd, 3);

    printf("Server is running...\n");

    // Accept client connection
    new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
    if (new_socket < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Get current time and send to client
    current_time = time(NULL);
    snprintf(buffer, sizeof(buffer), "Current Date and Time: %s", ctime(&current_time));
    send(new_socket, buffer, strlen(buffer), 0);
    
    close(new_socket);
    close(server_fd);
    return 0;
}

// DNS using UDP

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int sockfd;
    char buffer[1024];
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;
    
    // Create socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(8080);

    // Bind socket to port
    bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr));

    len = sizeof(cliaddr);

    while (1) {
        int n = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&cliaddr, &len);
        buffer[n] = '\0';

        char *domain = buffer;
        struct hostent *host = gethostbyname(domain);
        
        if (host) {
            char ip = inet_ntoa((struct in_addr*)host->h_addr_list[0]);
            sendto(sockfd, ip, strlen(ip), 0, (struct sockaddr*)&cliaddr, len);
        } else {
            char error[] = "Error: Host not found";
            sendto(sockfd, error, strlen(error), 0, (struct sockaddr*)&cliaddr, len);
        }
    }

    close(sockfd);
    return 0;
}

// TCP ECHO SERVER

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int sockfd;
    char buffer[1024];
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;
    
    // Create socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(8080);

    // Bind socket to port
    bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr));

    len = sizeof(cliaddr);

    while (1) {
        int n = recvfrom(sockfd, buffer, sizeof(buffer), 0, (struct sockaddr *)&cliaddr, &len);
        buffer[n] = '\0';

        char *domain = buffer;
        struct hostent *host = gethostbyname(domain);
        
        if (host) {
            char ip = inet_ntoa((struct in_addr*)host->h_addr_list[0]);
            sendto(sockfd, ip, strlen(ip), 0, (struct sockaddr*)&cliaddr, len);
        } else {
            char error[] = "Error: Host not found";
            sendto(sockfd, error, strlen(error), 0, (struct sockaddr*)&cliaddr, len);
        }
    }

    close(sockfd);
    return 0;
}

// TCP Chat Client

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

void* handle_client(void* socket_desc) {
    int sock = (int)socket_desc;
    char message[1024];
    char buffer[1024];

    while (1) {
        memset(message, 0, sizeof(message));
        if (recv(sock, message, sizeof(message), 0) <= 0) {
            break;
        }
        printf("Client: %s\n", message);
        printf("Enter message: ");
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = 0;
        send(sock, buffer, strlen(buffer), 0);
    }

    close(sock);
    free(socket_desc);
    return NULL;
}

int main() {
    int server_fd, new_socket, *new_sock;
    struct sockaddr_in address;
    socklen_t addr_len = sizeof(address);
    
    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    // Bind socket to port
    bind(server_fd, (struct sockaddr*)&address, sizeof(address));
    
    // Listen for connections
    listen(server_fd, 3);

    printf("Chat Server is running...\n");

    while ((new_socket = accept(server_fd, (struct sockaddr*)&address, &addr_len))) {
        pthread_t thread;
        new_sock = malloc(sizeof(int));
        *new_sock = new_socket;
        pthread_create(&thread, NULL, handle_client, (void*)new_sock);
        pthread_detach(thread);
    }

    close(server_fd);
    return 0;
}

// TCP Protocol 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    char buffer[1024] = {0};
    FILE *fp;
    int addrlen = sizeof(address);

    // Create socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8080);

    // Bind socket to port
    bind(server_fd, (struct sockaddr*)&address, sizeof(address));

    // Listen for connections
    listen(server_fd, 3);

    printf("File Transfer Server is running...\n");

    // Accept client connection
    new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen);
    
    // Open file to send
    fp = fopen("file.txt", "r");
    if (fp == NULL) {
        perror("File open failed");
        exit(EXIT_FAILURE);
    }

    // Send file contents to client
    while (fgets(buffer, sizeof(buffer), fp) != NULL) {
        send(new_socket, buffer, strlen(buffer), 0);
    }

    fclose(fp);
    close(new_socket);
    close(server_fd);
    return 0;
}

// CRC 

#include <stdio.h>
#include <string.h>

void xorOperation(char *dividend, char *divisor, int len) {
    for (int i = 0; i < len; i++) {
        dividend[i] = (dividend[i] == divisor[i]) ? '0' : '1';
    }
}

void crc(char *data, char *key) {
    int dataLen = strlen(data);
    int keyLen = strlen(key);
    char dividend[100], remainder[100];

    // Append zeros to data equal to the length of the key minus 1
    strcpy(dividend, data);
    for (int i = 0; i < keyLen - 1; i++) {
        strcat(dividend, "0");
    }

    printf("Dividend after appending zeros: %s\n", dividend);

    // Copy the first part of the dividend to the remainder
    strncpy(remainder, dividend, keyLen);
    remainder[keyLen] = '\0';

    // Perform division using XOR
    for (int i = 0; i < dataLen; i++) {
        if (remainder[0] == '1') {
            xorOperation(remainder, key, keyLen);
        }

        // Shift the remainder and bring down the next bit from dividend
        for (int j = 0; j < keyLen - 1; j++) {
            remainder[j] = remainder[j + 1];
        }
        remainder[keyLen - 1] = dividend[i + keyLen];
    }

    // Final XOR if needed
    if (remainder[0] == '1') {
        xorOperation(remainder, key, keyLen);
    }

    printf("Remainder: %s\n", remainder + 1);

    // Append remainder to the original data to form the codeword
    strcat(data, remainder + 1);
    printf("Transmitted Codeword: %s\n", data);
}

int main() {
    char data[100], key[30];

    printf("Enter the data: ");
    scanf("%s", data);
    
    printf("Enter the key (generator polynomial): ");
    scanf("%s", key);

    crc(data, key);
    
    return 0;
}

// Sliding window
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdbool.h>

int main() {
    int windowSize, frameCount, sentFrames = 0, ack;
    bool acks[100];

    printf("Enter the number of frames to be transmitted: ");
    scanf("%d", &frameCount);

    printf("Enter the window size: ");
    scanf("%d", &windowSize);

    // Initialize acknowledgments
    for (int i = 0; i < frameCount; i++) {
        acks[i] = false;
    }

    while (sentFrames < frameCount) {
        // Transmit frames within the window
        printf("\nSending frames: ");
        for (int i = 0; i < windowSize && sentFrames + i < frameCount; i++) {
            printf("%d ", sentFrames + i);
        }
        printf("\n");

        // Simulate receiving acknowledgments
        for (int i = 0; i < windowSize && sentFrames + i < frameCount; i++) {
            printf("Waiting for ACK for frame %d...\n", sentFrames + i);
            sleep(1);  // Simulating delay

            printf("Enter ACK (1 for success, 0 for failure) for frame %d: ", sentFrames + i);
            scanf("%d", &ack);
            if (ack == 1) {
                acks[sentFrames + i] = true;
                printf("ACK received for frame %d\n", sentFrames + i);
            } else {
                printf("ACK failed for frame %d, retransmitting...\n", sentFrames + i);
                break;
            }
        }

        // Move window based on successful acknowledgments
        while (sentFrames < frameCount && acks[sentFrames]) {
            sentFrames++;
        }
    }

    printf("\nAll frames have been successfully transmitted!\n");

    return 0;
}